{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","orientationAlpha","orientationBeta","orientationGamma","motionX","motionY","motionZ","state","update","useEffect","window","addEventListener","dat","alpha","beta","gamma","prev","accelerationIncludingGravity","x","y","z","className","toFixed","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOA+EeA,MAnEf,WAAgB,IAAD,EACWC,mBAAgB,CACtCC,iBAAkB,EAClBC,gBAAiB,EACjBC,iBAAkB,EAClBC,QAAS,EACTC,QAAS,EACTC,QAAS,IAPE,mBACNC,EADM,KACCC,EADD,KAkCb,OAxBAC,qBAAU,WACRC,OAAOC,iBAAiB,qBAAqB,SAACC,GAAS,IAC9CC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MACpBP,GAAO,SAAAQ,GAAI,kCAEJA,GAFI,IAGPf,iBAAkBY,GAAS,EAC3BX,gBAAiBY,GAAQ,EACzBX,iBAAkBY,GAAS,UAGjCL,OAAOC,iBAAiB,gBAAgB,SAACC,GACvC,GAAKA,EAAIK,6BAAT,CAD+C,MAE7BL,EAAIK,6BAAfC,EAFwC,EAExCA,EAAGC,EAFqC,EAErCA,EAAGC,EAFkC,EAElCA,EACbZ,GAAO,SAAAQ,GAAI,kCAEJA,GAFI,IAGPZ,QAASc,GAAK,EACdb,QAASc,GAAK,EACdb,QAASc,GAAK,aAGnB,IAGD,sBAAKC,UAAU,MAAf,UACE,wBAAOA,UAAU,cAAjB,UACE,+BACE,kDACA,6BAAKd,EAAMN,iBAAiBqB,QAAQ,QAEtC,+BACE,iDACA,6BAAKf,EAAML,gBAAgBoB,QAAQ,QAErC,+BACE,kDACA,6BAAKf,EAAMJ,iBAAiBmB,QAAQ,QAEtC,+BACE,yCACA,6BAAKf,EAAMH,QAAQkB,QAAQ,QAE7B,+BACE,yCACA,6BAAKf,EAAMF,QAAQiB,QAAQ,QAE7B,+BACE,yCACA,6BAAKf,EAAMD,QAAQgB,QAAQ,WAG9BC,KAAKC,UAAUjB,OC5DPkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7ec2aebc.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\ntype State = {\n  orientationAlpha: number,\n  orientationBeta: number,\n  orientationGamma: number,\n  motionX: number,\n  motionY: number,\n  motionZ: number,\n}\n\nfunction App() {\n  const [state, update] = useState<State>({\n    orientationAlpha: 0,\n    orientationBeta: 0,\n    orientationGamma: 0,\n    motionX: 0,\n    motionY: 0,\n    motionZ: 0,\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", (dat) => {\n      const {alpha, beta, gamma} = dat;\n      update(prev => (\n        {\n          ...prev,\n          orientationAlpha: alpha || 0,\n          orientationBeta: beta || 0,\n          orientationGamma: gamma || 0,\n        }));\n    });\n    window.addEventListener(\"devicemotion\", (dat) => {\n      if (!dat.accelerationIncludingGravity) return;\n      const {x, y, z} = dat.accelerationIncludingGravity;\n      update(prev => (\n        {\n          ...prev,\n          motionX: x || 0,\n          motionY: y || 0,\n          motionZ: z || 0,\n        }));\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <table className=\"value-table\">\n        <tr>\n          <td>orientationAlpha</td>\n          <td>{state.orientationAlpha.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>orientationBeta</td>\n          <td>{state.orientationBeta.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>orientationGamma</td>\n          <td>{state.orientationGamma.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>motionX</td>\n          <td>{state.motionX.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>motionY</td>\n          <td>{state.motionY.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>motionZ</td>\n          <td>{state.motionZ.toFixed(1)}</td>\n        </tr>\n      </table>\n      {JSON.stringify(state)}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}