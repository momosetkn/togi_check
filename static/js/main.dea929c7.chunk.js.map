{"version":3,"sources":["components/ProgressBar.tsx","components/Graph.tsx","utils/math.ts","pages/TrainingPage.tsx","pages/AnglePage.tsx","pages/NotFoundPage.tsx","reportWebVitals.ts","pages/StartPage.tsx","index.tsx"],"names":["ProgressBar","now","StyledMain","StyledAllProgress","StyledProgress","ratio","borderRadius","styled","div","colors","Graph","items","length","nivoData","map","index","data","id","title","color","Array","_","i","x","y","width","height","margin","top","right","bottom","left","animate","enableSlices","enableArea","yScale","type","stacked","curve","fill","match","average","reduce","a","b","sum","equallyDividedSlice","cnt","Math","ceil","offset","slice","samplingMaxCount","TrainingPage","useState","orientationAlpha","orientationBeta","orientationGamma","accelerationX","accelerationY","accelerationZ","measurementCount","measurementTime","Date","getTime","diffTime","measurementValue","setMeasurementValue","speedX","speedY","speedZ","distance","calculateValue","setCalculateValue","angles","status","state","update","useEffect","window","addEventListener","dat","alpha","beta","gamma","prev","acceleration","z","nowMeasurementTime","getNowDistanceAndSpeed","speed","additionalSpeed","nowSpeed","nowDistance","distanceAndSpeedX","distanceAndSpeedY","distanceAndSpeedZ","additionalDistance","sqrt","nowSpeedX","nowSpeedY","nowSpeedZ","min","navigator","vibrate","onClick","StyledAngleIndicator","abs","toFixed","StyledProgressBarContainer","className","Result","alphaAngles","useMemo","betaAngles","gammaAngles","graphItems","wobbleValues","getWobble","avg","wobbleValue","AnglePage","setOrientationGamma","StyledBackground","StyledIndicator","process","NotFoundPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StartPage","history","useHistory","startPath","localStorage","getItem","removeItem","push","ReactDOM","render","StrictMode","basename","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.dea929c7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"styled-components\";\n\nexport const ProgressBar = ({now}: {now: number}) => {\n  return (\n    <StyledMain>\n      <StyledAllProgress>\n        <StyledProgress ratio={now}/>\n      </StyledAllProgress>\n    </StyledMain>\n  );\n}\n\nconst borderRadius = '4px';\n\nconst StyledMain = styled.div`\n  width: 100%;\n  height: 15px;\n`;\n\nconst StyledAllProgress = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: ${borderRadius};\n  background-color: #e9ecef;\n`;\n\nconst StyledProgress = styled.div<{ratio: number}>`\n  width: ${({ratio}) => ratio}%; \n  height: 100%;\n  animation-delay: 250ms;\n  background-color: #007bff;\n  border-top-left-radius: ${borderRadius};\n  border-bottom-left-radius: ${borderRadius};\n`;\n","import { Line, Serie } from '@nivo/line'\n\nconst colors = [\n  \"rgb(241, 225, 91)\",\n  \"rgb(244, 117, 96)\",\n  \"rgb(97, 205, 187)\"\n]\n\nexport type Item = { data: number[], title?: string };\n\nexport const Graph = ({items, length }: {items: Item[], length: number}) => {\n  const nivoData: Serie[] = items.map(({data, title}, index) => (\n    {\n      id: title || `データ${index}`,\n      color: colors[index % colors.length],\n      data: [...Array(length)].map((_, i) => (\n        {\n          x: `${i}`,\n          y: data[i] || 0\n        }\n      ))\n    }));\n\n  return (\n    <Line\n      width={900}\n      height={400}\n      margin={{ top: 20, right: 20, bottom: 60, left: 80 }}\n      animate={true}\n      enableSlices={'x'}\n      data={nivoData}\n      enableArea={true}\n      yScale={{\n        type: 'linear',\n        stacked: true,\n      }}\n      curve=\"natural\"\n      fill={[{ match: '*', id: 'gradientA' }]}\n    />\n  )\n}","export const sum = (items: number[]) => items.reduce((a, b) => a + b);\nexport const average = (items: number[]) => sum(items) / items.length;\nexport const equallyDividedSlice = (items: number[], length: number) => {\n  const cnt = Math.ceil(items.length / length);\n  return [...Array(cnt)].map((_, i) => {\n    const offset = i * length;\n    return items.slice(offset, offset + length);\n  });\n};\n","import React, {useEffect, useMemo, useState} from 'react';\nimport styled from \"styled-components\";\nimport { ProgressBar } from \"../components/ProgressBar\";\nimport { Graph, Item as GraphItem } from \"../components/Graph\";\nimport {average, equallyDividedSlice} from \"../utils/math\";\n\ntype MeasurementValue = {\n  orientationAlpha: number,\n  orientationBeta: number,\n  orientationGamma: number,\n  accelerationX: number,\n  accelerationY: number,\n  accelerationZ: number,\n  measurementCount: number,// TODO: 要らない\n  measurementTime: number,\n  diffTime: number,\n}\n\ntype CalculateValue = {\n  speedX: number,\n  speedY: number,\n  speedZ: number,\n  distance: number,\n}\n\ntype Angle = { alpha: number, beta: number, gamma: number };\n\nconst samplingMaxCount = 1000;\n\nexport const TrainingPage = () => {\n  const [measurementValue, setMeasurementValue] = useState<MeasurementValue>({\n    orientationAlpha: 0,\n    orientationBeta: 0,\n    orientationGamma: 0,\n    accelerationX: 0,\n    accelerationY: 0,\n    accelerationZ: 0,\n    measurementCount: 0,\n    measurementTime: new Date().getTime(),\n    diffTime: 0,\n  });\n\n  const [calculateValue, setCalculateValue] = useState<CalculateValue>({\n    speedX: 0,\n    speedY: 0,\n    speedZ: 0,\n    distance: 0,\n  });\n\n  const [state, update] = useState<{angles: Angle[], status: 'waiting' | 'doing' | 'finished'}>({\n    angles: [],\n    status: 'waiting'\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", (dat) => {\n      const {alpha, beta, gamma} = dat;\n      setMeasurementValue(prev => (\n        {\n          ...prev,\n          orientationAlpha: alpha || 0,\n          orientationBeta: beta || 0,\n          orientationGamma: gamma || 0,\n        }));\n    });\n    window.addEventListener(\"devicemotion\", (dat) => {\n      if (!dat.acceleration) return;\n      const { x, y, z } = dat.acceleration;\n\n      const nowMeasurementTime = new Date().getTime();\n\n      setMeasurementValue(prev => (\n        {\n          ...prev,\n          accelerationX: x || 0,\n          accelerationY: y || 0,\n          accelerationZ: z || 0,\n          measurementCount: prev.measurementCount+1,\n          measurementTime: nowMeasurementTime,\n          diffTime: nowMeasurementTime - prev.measurementTime,\n        }));\n    });\n  }, []);\n\n  useEffect(() => {\n      const { accelerationX, accelerationY, accelerationZ, diffTime } = measurementValue;\n      const { speedX, speedY, speedZ } = calculateValue;\n\n      const getNowDistanceAndSpeed = ({acceleration, speed}:{acceleration: number, speed: number}) => {\n        const additionalSpeed = acceleration * diffTime;\n        let nowSpeed = additionalSpeed + speed\n        // 加速度が0になったとしても、スピード値が0にならない事象の対処\n        // 一定間隔に計測した値を元に積分していっているので、どうしても計算が不正確。\n        // 0になったときに、目立つので、0のときに0へ近づけるロジックを入れている。\n        const correctionRatio = additionalSpeed === 0 ? 980/1_000 : 1\n        nowSpeed = nowSpeed * correctionRatio;\n        // スピード値が無視できるぐらい小さな値になったら、いっそのこと0にする\n        nowSpeed = nowSpeed < 0.0001 ? 0 : nowSpeed\n        const nowDistance =  nowSpeed * diffTime\n        return {nowDistance, nowSpeed};\n      };\n\n      // 加速度が0だったら、距離も0（スピード計算が正確じゃないため、これを入れないと静止時にスピードが0にならない）\n    const { additionalDistance, nowSpeedX, nowSpeedY, nowSpeedZ } = (() => {\n      // if (accelerationX === 0 && accelerationY === 0 && accelerationZ === 0) {\n      //   const DISTANCE_AND_SPEED_ZERO = {nowDistance: 0, nowSpeed: 0}\n      //   return {\n      //     distance: 0,\n      //     distanceAndSpeedX: DISTANCE_AND_SPEED_ZERO,\n      //     distanceAndSpeedY: DISTANCE_AND_SPEED_ZERO,\n      //     distanceAndSpeedZ: DISTANCE_AND_SPEED_ZERO\n      //   };\n      // }\n\n      const distanceAndSpeedX = getNowDistanceAndSpeed({acceleration: accelerationX || 0, speed: speedX});\n      const distanceAndSpeedY = getNowDistanceAndSpeed({acceleration: accelerationY || 0, speed: speedY});\n      const distanceAndSpeedZ = getNowDistanceAndSpeed({acceleration: accelerationZ || 0, speed: speedZ});\n      const additionalDistance =  Math.sqrt(\n        Math.sqrt(distanceAndSpeedX.nowDistance ** 2 + distanceAndSpeedY.nowDistance ** 2) ** 2\n        + distanceAndSpeedZ.nowDistance ** 2\n      );\n      return { additionalDistance, nowSpeedX: distanceAndSpeedX.nowSpeed, nowSpeedY: distanceAndSpeedY.nowSpeed, nowSpeedZ: distanceAndSpeedZ.nowSpeed };\n    })();\n\n    setCalculateValue(prev => (\n        {\n          ...prev,\n          speedX: nowSpeedX,\n          speedY: nowSpeedY,\n          speedZ: nowSpeedZ,\n          distance: prev.distance + additionalDistance,\n        }));\n    // eslint-disable-next-line\n  }, [\n    measurementValue.accelerationX,\n    measurementValue.accelerationY,\n    measurementValue.accelerationZ,\n    measurementValue.diffTime,\n  ]);\n\n  const now = Math.min(calculateValue.distance/500_00, samplingMaxCount);\n\n  useEffect(() => {\n    let status = state.status;\n    if(now === samplingMaxCount){\n      navigator.vibrate(200);\n      status = 'finished'\n    }\n    const angles = [...state.angles, {\n      alpha: measurementValue.orientationAlpha,\n      beta: measurementValue.orientationBeta,\n      gamma: measurementValue.orientationGamma,\n    }];\n    update(prev => (\n      {\n        ...prev,\n        status,\n        angles,\n      }));\n    // eslint-disable-next-line\n  }, [now]);\n\n  return (\n    <StyledMain>\n      {state.status === 'waiting' ? (\n        <button onClick={() => {\n          // document.body.requestFullscreen();\n          update(prev => ({...prev, status: 'doing'}))\n        }}>\n          スタート\n        </button>\n      ) : state.status === 'doing' ? (\n          <>\n            <StyledAngleIndicator>\n              <span>{Math.abs(measurementValue.orientationGamma).toFixed(1)}度</span>\n            </StyledAngleIndicator>\n            <StyledProgressBarContainer>\n              <ProgressBar now={now / 10}/>\n            </StyledProgressBarContainer>\n            <table className=\"value-table\">\n              <tr>\n                <td>orientationAlpha</td>\n                <td>{measurementValue.orientationAlpha.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>orientationBeta</td>\n                <td>{measurementValue.orientationBeta.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>orientationGamma</td>\n                <td>{measurementValue.orientationGamma.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>accelerationX</td>\n                <td>{measurementValue.accelerationX.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>accelerationY</td>\n                <td>{measurementValue.accelerationY.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>accelerationZ</td>\n                <td>{measurementValue.accelerationZ.toFixed(1)}</td>\n              </tr>\n              <tr>\n                <td>measurementCount</td>\n                <td>{measurementValue.measurementCount}</td>\n              </tr>\n              <tr>\n                <td>speedX</td>\n                <td>{calculateValue.speedX}</td>\n              </tr>\n              <tr>\n                <td>speedY</td>\n                <td>{calculateValue.speedY}</td>\n              </tr>\n              <tr>\n                <td>speedZ</td>\n                <td>{calculateValue.speedZ}</td>\n              </tr>\n              <tr>\n                <td>distance</td>\n                <td>{(calculateValue.distance / 1_000_000).toFixed(2)}</td>\n              </tr>\n              <tr>\n                <td>now</td>\n                <td>{now}</td>\n              </tr>\n            </table>\n          </>\n        ) :\n        <Result angles={state.angles} />\n      }\n    </StyledMain>\n  );\n}\n\nconst Result = ({angles}:{angles: Angle[]}) => {\n  const alphaAngles = useMemo(() => angles.map(x => x.alpha), [angles]);\n  const betaAngles = useMemo(() => angles.map(x => x.beta), [angles]);\n  const gammaAngles = useMemo(() => angles.map(x => x.gamma), [angles]);\n\n  const graphLength = 25;\n  const sliceLength = samplingMaxCount / graphLength;\n  const graphItems: GraphItem[] = [\n    {\n      title: 'alpha',\n      data: equallyDividedSlice(alphaAngles, sliceLength).map(average),\n    },\n    {\n      title: 'beta',\n      data: equallyDividedSlice(betaAngles, sliceLength).map(average),\n    },\n    {\n      title: 'gamma',\n      data: equallyDividedSlice(gammaAngles, sliceLength).map(average),\n    },\n  ];\n\n  const wobbleValues = useMemo(() => {\n    const getWobble = (items: number[]) => {\n      const avg = average(items);\n      return items.map(x => Math.abs(x - avg));\n    }\n\n    return [\n      {\n        title: 'alpha',\n        data: getWobble(alphaAngles),\n      },\n      {\n        title: 'beta',\n        data: getWobble(betaAngles),\n      },\n      {\n        title: 'gamma',\n        data: getWobble(gammaAngles),\n      },\n    ];\n  }, [alphaAngles,\n    betaAngles,\n    gammaAngles]);\n\n  return (\n    <>\n      <Graph items={graphItems} length={graphLength} />\n      {wobbleValues.map(wobbleValue => (\n        <>\n          <div>{wobbleValue.title}</div>\n          <div>{wobbleValue.data}</div>\n        </>\n      ))}\n    </>\n  )\n}\n\nconst StyledMain = styled.div`\n  height: 100vh;\n  width: 100vw;  \n`;\n\nconst StyledAngleIndicator = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  span {\n    background: #00000090;\n    color: #ffffff;\n    font-size: 10vw;\n  }\n`;\n\nconst StyledProgressBarContainer = styled.div`\n  padding: 0 32px;\n`;","import React, { useEffect, useState } from 'react';\nimport styled from \"styled-components\";\n\nexport const AnglePage = () => {\n  const [orientationGamma, setOrientationGamma] = useState<number>(0);\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", (dat) => {\n      setOrientationGamma(dat.gamma || 0);\n    });\n  }, []);\n\n  return (\n    <StyledMain>\n      <StyledBackground left={orientationGamma > 0}/>\n      <StyledIndicator>\n        <span>{Math.abs(orientationGamma).toFixed(1)}度</span>\n      </StyledIndicator>\n    </StyledMain>\n  );\n}\n\nconst StyledMain = styled.div`\n  height: 100vh;\n  width: 100vw;  \n`;\n\nconst StyledBackground = styled.div<{left: boolean}>`\n  height: 100vh;\n  width: 100vw;\n  z-index: -1;\n  position: absolute;\n  background-image: url(\"${process.env.PUBLIC_URL}/hocho.jpg\");\n  transform: scale(${({left}) => left ? \"1\" : \"-1\"}, 1);\n`;\n\nconst StyledIndicator = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  span {\n    background: #00000090;\n    color: #ffffff;\n    font-size: 10vw;\n  }\n`;\n\n","import React from 'react';\n\nexport const NotFoundPage = () => {\n  return (\n    <h1>\n      Not Found\n    </h1>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nexport const StartPage = () => {\n  const history = useHistory()\n  useEffect(() => {\n    const startPath = localStorage.getItem('start_path');\n    localStorage.removeItem('start_path');\n    if(!startPath) return;\n\n    history.push(startPath);\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <h1>\n        StartPage\n      </h1>\n      <ul>\n        <li onClick={() => history.push('/training')}>training</li>\n        <li onClick={() => history.push('/angle')}>angle</li>\n      </ul>\n    </>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TrainingPage } from './pages/TrainingPage';\nimport { AnglePage } from \"./pages/AnglePage\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { NotFoundPage } from \"./pages/NotFoundPage\";\nimport reportWebVitals from './reportWebVitals';\nimport { StartPage } from \"./pages/StartPage\";\nimport { Graph } from \"./components/Graph\";\n\nconst ROUTER_BASENAME = '/togi_check';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={ROUTER_BASENAME}>\n      <Switch>\n        <Route exact path=\"/\">\n          <StartPage />\n        </Route>\n        <Route path=\"/angle\">\n          <AnglePage />\n        </Route>\n        <Route path=\"/training\">\n          <TrainingPage />\n        </Route>\n        <Route path=\"/graph\">\n          <Graph items={[{data: [1, 2, 3, 2, 3]}]} length={5} />\n        </Route>\n        <Route>\n          <NotFoundPage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}