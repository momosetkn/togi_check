{"version":3,"sources":["Graph.tsx","TrainingPage.tsx","AnglePage.tsx","NotFoundPage.tsx","reportWebVitals.ts","StartPage.tsx","index.tsx"],"names":["Graph","data","length","nivoData","id","dataTitle","color","Array","map","_","i","x","y","width","height","margin","top","right","bottom","left","animate","enableSlices","enableArea","yScale","type","stacked","curve","fill","match","TrainingPage","useState","orientationAlpha","orientationBeta","orientationGamma","accelerationX","accelerationY","accelerationZ","measurementCount","measurementTime","Date","getTime","diffTime","measurementValue","setMeasurementValue","speedX","speedY","speedZ","distance","calculateValue","setCalculateValue","plottingDistance","graph","setGraph","useEffect","window","addEventListener","dat","alpha","beta","gamma","prev","acceleration","z","nowMeasurementTime","getNowDistanceAndSpeed","speed","additionalSpeed","nowSpeed","nowDistance","distanceAndSpeedX","distanceAndSpeedY","distanceAndSpeedZ","additionalDistance","Math","sqrt","nowSpeedX","nowSpeedY","nowSpeedZ","step","graphLength","StyledMain","StyledAngleIndicator","abs","toFixed","className","styled","div","AnglePage","setOrientationGamma","StyledBackground","StyledIndicator","process","NotFoundPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StartPage","history","useHistory","startPath","localStorage","getItem","removeItem","push","ReactDOM","render","StrictMode","basename","exact","path","document","getElementById"],"mappings":"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","file":"static/js/main.80b55e33.chunk.js","sourcesContent":["import { Line, Serie } from '@nivo/line'\n\nexport const Graph = ({data, length, dataTitle}: { data: number[], length: number, dataTitle?: string }) => {\n  const nivoData: Serie[] = [\n    {\n      id: dataTitle || 'データ',\n      color: \"hsl(32, 70%, 50%)\",\n      data: [...Array(length)].map((_, i) => (\n        {\n          x: `${i}`,\n          y: data[i] || 0\n        }\n      ))\n    }\n  ];\n\n  return (\n    <Line\n      width={900}\n      height={400}\n      margin={{ top: 20, right: 20, bottom: 60, left: 80 }}\n      animate={true}\n      enableSlices={'x'}\n      data={nivoData}\n      enableArea={true}\n      yScale={{\n        type: 'linear',\n        stacked: true,\n      }}\n      curve=\"natural\"\n      fill={[{ match: '*', id: 'gradientA' }]}\n    />\n  )\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport styled from \"styled-components\";\nimport {Graph} from \"./Graph\";\n\ntype MeasurementValue = {\n  orientationAlpha: number,\n  orientationBeta: number,\n  orientationGamma: number,\n  accelerationX: number,\n  accelerationY: number,\n  accelerationZ: number,\n  measurementCount: number,// TODO: 要らない\n  measurementTime: number,\n  diffTime: number,\n}\n\ntype CalculateValue = {\n  speedX: number,\n  speedY: number,\n  speedZ: number,\n  distance: number,\n}\n\ntype GraphValue = {\n  plottingDistance: number,\n  data: number[],\n}\n\nexport const TrainingPage = () => {\n  const [measurementValue, setMeasurementValue] = useState<MeasurementValue>({\n    orientationAlpha: 0,\n    orientationBeta: 0,\n    orientationGamma: 0,\n    accelerationX: 0,\n    accelerationY: 0,\n    accelerationZ: 0,\n    measurementCount: 0,\n    measurementTime: new Date().getTime(),\n    diffTime: 0,\n  });\n\n  const [calculateValue, setCalculateValue] = useState<CalculateValue>({\n    speedX: 0,\n    speedY: 0,\n    speedZ: 0,\n    distance: 0,\n  });\n\n  const [graph, setGraph] = useState<GraphValue>({\n    plottingDistance: 0,\n    data: []\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", (dat) => {\n      const {alpha, beta, gamma} = dat;\n      setMeasurementValue(prev => (\n        {\n          ...prev,\n          orientationAlpha: alpha || 0,\n          orientationBeta: beta || 0,\n          orientationGamma: gamma || 0,\n        }));\n    });\n    window.addEventListener(\"devicemotion\", (dat) => {\n      if (!dat.acceleration) return;\n      const { x, y, z } = dat.acceleration;\n\n      const nowMeasurementTime = new Date().getTime();\n\n      setMeasurementValue(prev => (\n        {\n          ...prev,\n          accelerationX: x || 0,\n          accelerationY: y || 0,\n          accelerationZ: z || 0,\n          measurementCount: prev.measurementCount+1,\n          measurementTime: nowMeasurementTime,\n          diffTime: nowMeasurementTime - prev.measurementTime,\n        }));\n    });\n  }, []);\n\n  useEffect(() => {\n      const { accelerationX, accelerationY, accelerationZ, diffTime } = measurementValue;\n      const { speedX, speedY, speedZ } = calculateValue;\n\n      const getNowDistanceAndSpeed = ({acceleration, speed}:{acceleration: number, speed: number}) => {\n        const additionalSpeed = acceleration * diffTime;\n        let nowSpeed = additionalSpeed + speed\n        // 加速度が0になったとしても、スピード値が0にならない事象の対処\n        // 一定間隔に計測した値を元に積分していっているので、どうしても計算が不正確。\n        // 0になったときに、目立つので、0のときに0へ近づけるロジックを入れている。\n        const correctionRatio = additionalSpeed === 0 ? 980/1_000 : 1\n        nowSpeed = nowSpeed * correctionRatio;\n        // スピード値が無視できるぐらい小さな値になったら、いっそのこと0にする\n        nowSpeed = nowSpeed < 0.0001 ? 0 : nowSpeed\n        const nowDistance =  nowSpeed * diffTime\n        return {nowDistance, nowSpeed};\n      };\n\n\n      // 加速度が0だったら、距離も0（スピード計算が正確じゃないため、これを入れないと静止時にスピードが0にならない）\n    const { additionalDistance, nowSpeedX, nowSpeedY, nowSpeedZ } = (() => {\n      // if (accelerationX === 0 && accelerationY === 0 && accelerationZ === 0) {\n      //   const DISTANCE_AND_SPEED_ZERO = {nowDistance: 0, nowSpeed: 0}\n      //   return {\n      //     distance: 0,\n      //     distanceAndSpeedX: DISTANCE_AND_SPEED_ZERO,\n      //     distanceAndSpeedY: DISTANCE_AND_SPEED_ZERO,\n      //     distanceAndSpeedZ: DISTANCE_AND_SPEED_ZERO\n      //   };\n      // }\n\n      const distanceAndSpeedX = getNowDistanceAndSpeed({acceleration: accelerationX || 0, speed: speedX});\n      const distanceAndSpeedY = getNowDistanceAndSpeed({acceleration: accelerationY || 0, speed: speedY});\n      const distanceAndSpeedZ = getNowDistanceAndSpeed({acceleration: accelerationZ || 0, speed: speedZ});\n      const additionalDistance =  Math.sqrt(\n        Math.sqrt(distanceAndSpeedX.nowDistance ** 2 + distanceAndSpeedY.nowDistance ** 2) ** 2\n        + distanceAndSpeedZ.nowDistance ** 2\n      );\n      return { additionalDistance, nowSpeedX: distanceAndSpeedX.nowSpeed, nowSpeedY: distanceAndSpeedY.nowSpeed, nowSpeedZ: distanceAndSpeedZ.nowSpeed };\n    })();\n\n    setCalculateValue(prev => (\n        {\n          ...prev,\n          speedX: nowSpeedX,\n          speedY: nowSpeedY,\n          speedZ: nowSpeedZ,\n          distance: prev.distance + additionalDistance,\n        }));\n    // eslint-disable-next-line\n  }, [\n    measurementValue.accelerationX,\n    measurementValue.accelerationY,\n    measurementValue.accelerationZ,\n    measurementValue.diffTime,\n    calculateValue.speedX,\n    calculateValue.speedY,\n    calculateValue.speedZ,\n  ]);\n\n  useEffect(() => {\n    if (calculateValue.distance - graph.plottingDistance >= step) {\n\n      setGraph(prev => ({\n        ...prev,\n        plottingDistance: calculateValue.distance,\n        data: prev.data.length > graphLength ? [] : [...prev.data, measurementValue.orientationGamma],\n      }));\n    }\n    // eslint-disable-next-line\n  }, [calculateValue.distance, measurementValue.orientationGamma]);\n\n  return (\n    <StyledMain>\n      <Graph data={graph.data} length={1000} />\n      <StyledAngleIndicator>\n        <span>{Math.abs(measurementValue.orientationGamma).toFixed(1)}度</span>\n      </StyledAngleIndicator>\n      <table className=\"value-table\">\n        <tr>\n          <td>orientationAlpha</td>\n          <td>{measurementValue.orientationAlpha.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>orientationBeta</td>\n          <td>{measurementValue.orientationBeta.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>orientationGamma</td>\n          <td>{measurementValue.orientationGamma.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>accelerationX</td>\n          <td>{measurementValue.accelerationX.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>accelerationY</td>\n          <td>{measurementValue.accelerationY.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>accelerationZ</td>\n          <td>{measurementValue.accelerationZ.toFixed(1)}</td>\n        </tr>\n        <tr>\n          <td>measurementCount</td>\n          <td>{measurementValue.measurementCount}</td>\n        </tr>\n        <tr>\n          <td>speedX</td>\n          <td>{calculateValue.speedX}</td>\n        </tr>\n        <tr>\n          <td>speedY</td>\n          <td>{calculateValue.speedY}</td>\n        </tr>\n        <tr>\n          <td>speedZ</td>\n          <td>{calculateValue.speedZ}</td>\n        </tr>\n        <tr>\n          <td>distance</td>\n          <td>{(calculateValue.distance/1_000_000).toFixed(2)}</td>\n        </tr>\n      </table>\n    </StyledMain>\n  );\n}\n\nconst step = 1_000;\nconst graphLength = 1_000;\n\nconst StyledMain = styled.div`\n  height: 100vh;\n  width: 100vw;  \n`;\n\nconst StyledAngleIndicator = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  span {\n    background: #00000090;\n    color: #ffffff;\n    font-size: 10vw;\n  }\n`;\n"," import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport styled from \"styled-components\";\n\nexport const AnglePage = () => {\n  const [orientationGamma, setOrientationGamma] = useState<number>(0);\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", (dat) => {\n      setOrientationGamma(dat.gamma || 0);\n    });\n  }, []);\n\n  return (\n    <StyledMain>\n      <StyledBackground left={orientationGamma > 0}/>\n      <StyledIndicator>\n        <span>{Math.abs(orientationGamma).toFixed(1)}度</span>\n      </StyledIndicator>\n    </StyledMain>\n  );\n}\n\nconst StyledMain = styled.div`\n  height: 100vh;\n  width: 100vw;  \n`;\n\nconst StyledBackground = styled.div<{left: boolean}>`\n  height: 100vh;\n  width: 100vw;\n  z-index: -1;\n  position: absolute;\n  background-image: url(\"${process.env.PUBLIC_URL}/hocho.jpg\");\n  transform: scale(${({left}) => left ? \"1\" : \"-1\"}, 1);\n`;\n\nconst StyledIndicator = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  span {\n    background: #00000090;\n    color: #ffffff;\n    font-size: 10vw;\n  }\n`;\n\n"," import React from 'react';\nimport './App.css';\n\nexport const NotFoundPage = () => {\n  return (\n    <h1>\n      Not Found\n    </h1>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { useHistory } from 'react-router-dom';\n\nexport const StartPage = () => {\n  const history = useHistory()\n  useEffect(() => {\n    const startPath = localStorage.getItem('start_path');\n    localStorage.removeItem('start_path');\n    if(!startPath) return;\n\n    history.push(startPath);\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <h1>\n      StartPage\n    </h1>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TrainingPage } from './TrainingPage';\nimport { AnglePage } from \"./AnglePage\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { NotFoundPage } from \"./NotFoundPage\";\nimport reportWebVitals from './reportWebVitals';\nimport { StartPage } from \"./StartPage\";\nimport { Graph } from \"./Graph\";\n\nconst ROUTER_BASENAME = '/togi_check';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={ROUTER_BASENAME}>\n      <Switch>\n        <Route exact path=\"/\">\n          <StartPage />\n        </Route>\n        <Route path=\"/angle\">\n          <AnglePage />\n        </Route>\n        <Route path=\"/training\">\n          <TrainingPage />\n        </Route>\n        <Route path=\"/graph\">\n          <Graph data={[1,2,3,2,3]} length={5} />\n        </Route>\n        <Route>\n          <NotFoundPage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}